import React, { useEffect, useState } from "react";
import Head from "next/head";
import Navbar from "../components/Navbar";
import styles from "../styles/Marketplace.module.css";
import Link from "next/link";
import _ from "lodash";

const Marketplace = (props) => {
  const [cardDetail, setCardDetail] = useState(props.ask_summaries);
  const [sortType, setSortType] = useState("price_high");
  const [filters, setFilters] = useState([]);
  const [counts, setCounts] = useState({
    typeCount: 0,
    slimeScore: 0,
  });

  const applyFilter = (target) => {
    const newVal = { trait_type: target.name, value: target.id };

    if (target.checked) {
      setFilters((prev) => [...prev, newVal]);
    } else {
      setFilters((prev) => prev.filter((item) => !_.isEqual(item, newVal)));
    }
  };

  useEffect(() => {
    const updated = props.ask_summaries.filter((item) => {
      let flag = false;

      if (filters.length === 0) return true;

      filters.forEach((element) => {
        if (_.findIndex(item.attributes, element) !== -1) flag = true;
      });

      return flag;
    });

    setCardDetail(updated);
  }, [filters, props.ask_summaries]);

  useEffect(() => {
    const sortArray = (type) => {
      const types = {
        price_high: "price_high",
        price_low: "price_low",
        mostRecent: "most-recent",
        leastRecent: "least-recent",
      };
      const sortProperty = types[type];
      if (sortType === "price_high") {
        const sorted = [...cardDetail].sort(
          (a, b) => b[sortProperty] - a[sortProperty]
        );
        // console.log(sorted, "From Sorted High");
        setCardDetail(sorted);
      } else if (sortType === "price_low") {
        const sorted = [...cardDetail].sort(
          (a, b) => a[sortProperty] - b[sortProperty]
        );
        // console.log(sorted, "From Sorted Low");
        setCardDetail(sorted);
      } else if (sortType === "most-recent") {
        const sorted = [...cardDetail]
          .sort((a, b) => {
            return (
              new Date(a.updated).getTime() - new Date(b.updated).getTime()
            );
          })
          .reverse();
        // console.log(sorted, "From Sorted Most-Recent");
        setCardDetail(sorted);
      } else if (sortType === "least-recent") {
        const sorted = [...cardDetail].sort((a, b) => {
          return new Date(a.updated).getTime() - new Date(b.updated).getTime();
        });
        // console.log(sorted, "From Sorted least-recent");
        setCardDetail(sorted);
      }
    };

    sortArray(sortType);
  }, [sortType]);

  useEffect(() => {
    let typeCount = 0;
    let slimeScore = 0;
    // let someOtherCount = 0;

    const checkInps = document.querySelectorAll("input");

    checkInps.forEach((inp) => {
      if (inp.name === "Type" && inp.checked) {
        typeCount++;
      } else if (inp.name === "Slime Score" && inp.checked) {
        slimeScore++;
      }
    });

    setCounts({ ...counts, typeCount: typeCount, slimeScore: slimeScore });
  }, [filters, counts]);

  // console.log(filters);

  const resetFilters = () => {
    setFilters([]);
  };

  return (
    <div>
      <Head>
        <title>Solkicks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Navbar />

        <div className={styles.pageWrapper}>
          <div className={styles.pageContainer}>
            {/* Header */}
            <div className={styles.headerWrapper}>
              <h1>Marketplace</h1>
            </div>
            {/* Sort By */}
            <div className={styles.marketplaceSort}>
              <div className={styles.sortFilter}>
                <select
                  onChange={(e) => setSortType(e.target.value)}
                  className={styles.sortSelect}
                >
                  <option value="price_high">Ask Price, Descending</option>
                  <option value="price_low">Ask Price, Ascending</option>
                  <option value="most-recent">Most Recent</option>
                  <option value="least-recent">Least Recent</option>
                </select>
              </div>
            </div>

            <div className={styles.marketPlaceContent}>
              {/* Sidebar */}
              <div className={styles.sideBarContent}>
                <div className={styles.analytics}>
                  <div className={styles.floorPrice}>
                    <div className={styles.price}>$126.69</div>
                    <div className={styles.label}>Floor Price</div>
                  </div>
                  <div className={styles.volumeTraded}>
                    <div className={styles.price}>$1.89M</div>
                    <div className={styles.label}>
                      <select className={styles.volumeSelect}>
                        <option
                          className={styles.volumeOption}
                          value="lastDayVolume"
                        >
                          24h
                        </option>
                        <option
                          className={styles.volumeOption}
                          value="lastWeekVolume"
                        >
                          7d
                        </option>
                        <option
                          className={styles.volumeOption}
                          value="lastMonthVolume"
                        >
                          30d
                        </option>
                        <option
                          className={styles.volumeOption}
                          value="allTimeVolume"
                        >
                          All Time
                        </option>
                      </select>
                      Volume
                    </div>
                  </div>
                </div>

                <div className={styles.filterContainer}>
                  <div className={styles.filterContainerHeading}>
                    <h1>Marketplace Filters</h1>

                    {filters.length !== 0 && (
                      <div className={styles.clearFilter}>
                        <button
                          onClick={() => resetFilters()}
                          type="button"
                          className={styles.clearFilterBtn}
                        >
                          <span className={styles.closeIcon}>
                            <svg
                              width="10"
                              height="10"
                              viewBox="0 0 12 12"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M11 1L1 11 11 1z"
                                fill="currentColor"
                              ></path>
                              <path
                                d="M11 1L1 11"
                                stroke="currentColor"
                                strokeWidth="1.5"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                              ></path>
                              <path
                                d="M11 11L1 1l10 10z"
                                fill="currentColor"
                              ></path>
                              <path
                                d="M11 11L1 1"
                                stroke="currentColor"
                                strokeWidth="1.5"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                              ></path>
                            </svg>
                          </span>
                          Reset Filters
                        </button>
                      </div>
                    )}
                  </div>

                  <div className={styles.filterAccordion}>
                    <summary className={styles.accordionHeading}>
                      <span style={{ display: "flex", alignItems: "center" }}>
                        Type{" "}
                        {counts.typeCount ? (
                          <span className={styles.selectCount}>
                            {counts.typeCount}
                          </span>
                        ) : null}
                      </span>
                      <div className={styles.accResetBtn}>
                        {counts.typeCount ? (
                          <button
                            onClick={() =>
                              setFilters((prev) =>
                                prev.filter((item) => !_.includes(item, "Type"))
                              )
                            }
                            type="button"
                          >
                            Reset
                          </button>
                        ) : null}
                      </div>
                      <svg
                        width="13"
                        height="8"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        className="filter-accordion_icon__2DcQz"
                      >
                        <path
                          d="M12 1L6.5 7 1 1"
                          stroke="currentColor"
                          strokeWidth="1.5"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        ></path>
                      </svg>
                    </summary>

                    <div className={styles.accordionContent}>
                      <div>
                        <label htmlFor="Type" className={styles.accordionLabel}>
                          <input
                            type="checkbox"
                            name="Type"
                            className={styles.accordionChheckbox}
                            value="Base Pack"
                            id="Base Pack"
                            onChange={(e) => applyFilter(e.target)}
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Type",
                                value: "Base Pack",
                              }) !== -1
                            }
                          />
                          Base Pack
                        </label>
                      </div>
                      <div>
                        <label htmlFor="Type" className={styles.accordionLabel}>
                          <input
                            type="checkbox"
                            name="Type"
                            className={styles.accordionChheckbox}
                            value="Character"
                            id="Character"
                            onChange={(e) => applyFilter(e.target)}
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Type",
                                value: "Character",
                              }) !== -1
                            }
                          />
                          Character
                        </label>
                      </div>
                      <div>
                        <label htmlFor="Type" className={styles.accordionLabel}>
                          <input
                            type="checkbox"
                            name="Type"
                            className={styles.accordionChheckbox}
                            value="Slime"
                            id="Slime"
                            onChange={(e) => applyFilter(e.target)}
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Type",
                                value: "Slime",
                              }) !== -1
                            }
                          />
                          Slime
                        </label>
                      </div>
                    </div>
                  </div>

                  <div className={styles.filterAccordion}>
                    <summary className={styles.accordionHeading}>
                      <span style={{ display: "flex", alignItems: "center" }}>
                        Slime Score{" "}
                        {counts.slimeScore ? (
                          <span className={styles.selectCount}>
                            {counts.slimeScore}
                          </span>
                        ) : null}
                      </span>
                      <div className={styles.accResetBtn}>
                        {counts.slimeScore ? (
                          <button
                            onClick={() =>
                              setFilters((prev) =>
                                prev.filter(
                                  (item) => !_.includes(item, "Slime Score")
                                )
                              )
                            }
                            type="button"
                          >
                            Reset
                          </button>
                        ) : null}
                      </div>
                      <svg
                        width="13"
                        height="8"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        className="filter-accordion_icon__2DcQz"
                      >
                        <path
                          d="M12 1L6.5 7 1 1"
                          stroke="currentColor"
                          strokeWidth="1.5"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        ></path>
                      </svg>
                    </summary>

                    <div className={styles.accordionContent}>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="1"
                            onChange={(e) => applyFilter(e.target)}
                            id="1"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "1",
                              }) !== -1
                            }
                          />
                          1
                        </label>
                      </div>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="2"
                            onChange={(e) => applyFilter(e.target)}
                            id="2"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "2",
                              }) !== -1
                            }
                          />
                          2
                        </label>
                      </div>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="3"
                            onChange={(e) => applyFilter(e.target)}
                            id="3"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "3",
                              }) !== -1
                            }
                          />
                          3
                        </label>
                      </div>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="4"
                            onChange={(e) => applyFilter(e.target)}
                            id="4"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "4",
                              }) !== -1
                            }
                          />
                          4
                        </label>
                      </div>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="5"
                            onChange={(e) => applyFilter(e.target)}
                            id="5"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "5",
                              }) !== -1
                            }
                          />
                          5
                        </label>
                      </div>
                      <div>
                        <label
                          htmlFor="Slime Score"
                          className={styles.accordionLabel}
                        >
                          <input
                            type="checkbox"
                            name="Slime Score"
                            className={styles.accordionChheckbox}
                            value="10"
                            onChange={(e) => applyFilter(e.target)}
                            id="10"
                            checked={
                              _.findIndex(filters, {
                                trait_type: "Slime Score",
                                value: "10",
                              }) !== -1
                            }
                          />
                          10
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {/* Card Content */}
              <div className={styles.marketContent}>
                <div className={styles.contentWrapper}>
                  {cardDetail.map((e) => {
                    // console.log(e);
                    return (
                      <Link
                        href={"/nft/" + e.nft_data_id}
                        // href="/nft"

                        title="nft"
                        key={e.nft_data_id}
                      >
                        <div
                          className={styles.productCardContainer}
                          key={e.nft_data_id}
                        >
                          <span className={styles.imageContainer}>
                            <span
                              className={styles.imageC}
                              data-loading="false"
                            >
                              <img
                                alt={e.name + e.series + e.rarity}
                                className={styles.productImage}
                                decoding="async"
                                height="300"
                                loading="lazy"
                                sizes=""
                                src={e.images.png.primary.url}
                                srcSet=""
                                width="323"
                              />
                            </span>
                          </span>
                          <div className={styles.productCardContainer}>
                            <div className={styles.cardTitle}>
                              <h3>{e.name}</h3>
                            </div>
                            <div className={styles.price}>
                              <span className={styles.ppPrice}>
                                ${e.price_high}
                              </span>
                            </div>
                          </div>
                        </div>
                      </Link>
                    );
                  })}
                </div>

                {cardDetail.length === 0 && (
                  <h1
                    style={{
                      color: "white",
                      textAlign: "center",
                      width: "100%",
                    }}
                  >
                    No data found
                  </h1>
                )}
              </div>
            </div>
          </div>
        </div>
      </main>

      <footer></footer>
    </div>
  );
};

export default Marketplace;

import fsPromises from "fs/promises";
import path from "path";

export async function getStaticProps() {
  const filePath = path.join(process.cwd(), "data.json");
  const jsonData = await fsPromises.readFile(filePath);
  const objectData = JSON.parse(jsonData);

  return {
    props: objectData,
  };
}
